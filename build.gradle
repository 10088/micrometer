buildscript {
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4'
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1'
    }
}

plugins {
    id 'java'
    id 'me.champeau.gradle.jmh' version '0.3.1'
    id 'nebula.integtest' version '3.3.0'
    id 'nebula.optional-base' version '3.1.0'

    id 'org.ajoberstar.github-pages' version '1.1.0'
    id 'org.asciidoctor.gradle.asciidoctor' version '1.5.1'
    id 'org.asciidoctor.convert' version '1.5.3'

    id 'nebula.maven-publish' version '4.9.1'
    id 'nebula.release' version '5.0.0'
    id 'nebula.nebula-bintray-publishing' version '3.5.2'
}

apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.github.hierynomus.license'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-milestone' }
    maven { url 'https://repo.spring.io/libs-snapshot' }
}

ext {
    springBootVersion = findProperty('springBootVersion') ?: '2.0.0.BUILD-SNAPSHOT'
    springVersion = findProperty('springVersion') ?: '5.0.0.BUILD-SNAPSHOT'
}

group = 'org.springframework.metrics'

dependencies {
    compile "org.springframework:spring-beans:$project.springBootVersion", optional
    compile "org.springframework.boot:spring-boot:$project.springBootVersion", optional
    compile "org.springframework.boot:spring-boot-actuator:$project.springBootVersion", optional
    compile "org.springframework:spring-webmvc:$project.springVersion", optional
    compile "org.springframework:spring-webflux:$project.springVersion", optional
    compile "org.springframework:spring-web:$project.springVersion", optional
    compile 'javax.servlet:javax.servlet-api:3.0.1', optional

    // collector options
    compile 'com.netflix.spectator:spectator-api:latest.release', optional
    compile 'io.prometheus:simpleclient:latest.release', optional
    compile 'io.prometheus:simpleclient_pushgateway:latest.release', optional
    compile 'com.datadoghq:java-dogstatsd-client:latest.release', optional
    compile 'io.dropwizard.metrics:metrics-core:latest.release', optional

    // cache monitoring
    compile 'com.google.guava:guava:21.0', optional

    // JUnit 5
    testCompile 'org.junit.platform:junit-platform-launcher:1.0.0-M4' // see https://github.com/junit-team/junit5/issues/586 for why this is necessary
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M4'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.0.0-M4'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M4'
    testRuntime 'ch.qos.logback:logback-classic:latest.release'

    testCompile 'org.assertj:assertj-core:3.+'

    testCompile "org.springframework.boot:spring-boot-starter-web:$project.springBootVersion"
    testCompile "org.springframework.boot:spring-boot-actuator:$project.springBootVersion"
    testCompile "org.springframework.boot:spring-boot-starter-test:$project.springBootVersion"
    testCompile 'org.springframework:spring-test:5.0.0.BUILD-SNAPSHOT' // earlier versions did not contain JUnit 5 support

    testCompile 'io.projectreactor.addons:reactor-test:3.1.0.BUILD-SNAPSHOT'
    testCompile 'io.projectreactor.ipc:reactor-netty:latest.release'

    testRuntime 'org.apache.httpcomponents:httpclient:4.4+'

    integTestCompile 'com.netflix.spectator:spectator-reg-metrics3:latest.release'
    integTestCompile 'com.netflix.spectator:spectator-reg-servo:latest.release'
    integTestCompile 'com.netflix.spectator:spectator-reg-atlas:latest.release'
    integTestCompile 'com.netflix.servo:servo-atlas:latest.release'

    integTestCompile 'io.projectreactor:reactor-core:latest.release'

    integTestCompile 'io.prometheus:simpleclient_spring_boot:latest.release'
    integTestCompile 'io.prometheus:simpleclient_hotspot:latest.release'

    jmh 'org.openjdk.jmh:jmh-core:latest.release'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:latest.release'
    jmh "org.springframework.boot:spring-boot-actuator:$project.springBootVersion"
}

jmh {
    jmhVersion = '1.18'
    warmupIterations = 2
    iterations = 5
    fork = 0
    duplicateClassesStrategy = 'warn'
}

junitPlatform {
//    enableStandardTestTask true
    logManager 'org.apache.logging.log4j.jul.LogManager'
}

githubPages {
    repoUri = 'https://github.com/spring-projects/spring-metrics.git'
    credentials {
        username = project.hasProperty('githubToken') ? project.githubToken : ''
        password = ''
    }

    pages {
        from file(asciidoctor.outputDir.path + '/html5')
    }
}

asciidoctorj {
    version = '1.5.4'
}

asciidoctor {
    attributes \
        'build-gradle': file('build.gradle'),
        'source-highlighter': 'coderay',
        'imagesdir': 'images',
        'toc': 'left',
        'icons': 'font',
        'setanchors': 'true',
        'idprefix': '',
        'idseparator': '-',
        'docinfo1': 'true'
}

publishGhPages.dependsOn asciidoctor

bintray.pkg {
    repo = 'jars'
    userOrg = 'spring'
    websiteUrl = 'https://github.com/spring-projects/spring-metrics'
    vcsUrl = 'https://github.com/spring-projects/spring-metrics.git'
    issueTrackerUrl = 'https://github.com/spring-projects/spring-metrics/issues'
    labels = ['spring', 'metrics', 'prometheus', 'spectator']
}

license {
    header = file('gradle/licenseHeader.txt')
    exclude '**/*.tokens'
    mapping {
        kt = 'JAVADOC_STYLE'
    }
    sourceSets = project.sourceSets
    strictCheck = true
}

nebulaRelease.addReleaseBranchPattern(/v?\d+\.\d+\.\d+\.RELEASE/)